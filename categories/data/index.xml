<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>data on Datumorphism</title><link>https://datumorphism.leima.is/categories/data/</link><description>Recent content in data on Datumorphism</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Mon, 14 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://datumorphism.leima.is/categories/data/index.xml" rel="self" type="application/rss+xml"/><item><title>PySpark: Compare Two Schemas</title><link>https://datumorphism.leima.is/til/data/pyspark-schema-comparison/</link><pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/data/pyspark-schema-comparison/</guid><description>def schema_diff(schema1, schema2): return { &amp;#39;fields_in_1_not_2&amp;#39;: set(schema1) - set(schema2), &amp;#39;fields_in_2_not_1&amp;#39;: set(schema2) - set(schema1) }</description></item><item><title>Postgres Timezone Conversions</title><link>https://datumorphism.leima.is/til/data/postgres.timezone-conversion/</link><pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/data/postgres.timezone-conversion/</guid><description>Pitfals of timezone conversion in Postgres</description></item><item><title>Deal with Rare Categories Using Pandas</title><link>https://datumorphism.leima.is/til/data/deal-with-rare-categories-using-pandas/</link><pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/data/deal-with-rare-categories-using-pandas/</guid><description>We will illustrate how to deal with rare categories using pandas mask.
import pandas as pd ############# # Create fake names frequent_names = list(&amp;#39;ABC&amp;#39;) rare_names = list(&amp;#39;DEF&amp;#39;) dataset = sum( [[i]*10 for i in frequent_names] + [[i]*2 for i in rare_names], [] ) # Create a series based on the names series = pd.Series(dataset) print(series) # Find the counts of the names in the series series_counts = series.value_counts() print(series_counts) # Find names that has less than 10 counts # And create a mask mask = series.isin(series_counts.loc[series_counts&amp;lt;10].index) print(mask) # Set these rare names to X series[mask] = &amp;#39;X&amp;#39; # Check the new series print(series.</description></item><item><title>Postgres Optimization in JOIN</title><link>https://datumorphism.leima.is/til/data/postgres.join-begin-with-smallest-cardinality/</link><pubDate>Sat, 28 Nov 2020 11:39:21 +0100</pubDate><guid>https://datumorphism.leima.is/til/data/postgres.join-begin-with-smallest-cardinality/</guid><description>Join tables together starting with the smallest table (table with less cardinality) speeds things up.</description></item><item><title>Deal with NULL in Postgres</title><link>https://datumorphism.leima.is/til/data/postgres.deal-with-null/</link><pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/data/postgres.deal-with-null/</guid><description>Please deal with null carefully.</description></item><item><title>BigQuery Meta Tables</title><link>https://datumorphism.leima.is/til/data/bigquery-meta-tables/</link><pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/data/bigquery-meta-tables/</guid><description>Meta tables are very useful when it comes to get bigquery table information programmatically.</description></item><item><title>Calculate Moving Average Using SQL/BigQquery</title><link>https://datumorphism.leima.is/til/data/bigquery-moving-average/</link><pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/data/bigquery-moving-average/</guid><description>Snippet for calculating moving avg using sql/biguqery</description></item><item><title>Generate a Column of Continuous Dates in BigQuery</title><link>https://datumorphism.leima.is/til/data/bigquery-generate-continuous-dates-as-a-column/</link><pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/data/bigquery-generate-continuous-dates-as-a-column/</guid><description>Generate a table with a column of continuous dates</description></item><item><title>Get Current User in BigQuery</title><link>https://datumorphism.leima.is/til/data/bigquery-get-current-user/</link><pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/data/bigquery-get-current-user/</guid><description>BigQuery Current User</description></item><item><title>Materialize the Query Result for Performance</title><link>https://datumorphism.leima.is/til/data/bigquery-materialize-query-results-for-performance/</link><pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/data/bigquery-materialize-query-results-for-performance/</guid><description>Materialize the query result for multistage queries to make your query faster and lower the costs.</description></item><item><title>Certificate Errors in urllib</title><link>https://datumorphism.leima.is/til/data/python-urllib-ssl/</link><pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/data/python-urllib-ssl/</guid><description>Dealing with errors when scraping data</description></item></channel></rss>