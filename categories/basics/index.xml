<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>basics on Datumorphism</title><link>https://datumorphism.leima.is/categories/basics/</link><description>Recent content in basics on Datumorphism</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Wed, 10 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://datumorphism.leima.is/categories/basics/index.xml" rel="self" type="application/rss+xml"/><item><title>Regular Expression Basics</title><link>https://datumorphism.leima.is/wiki/sugar/regular-experssions/</link><pubDate>Wed, 20 Jun 2018 15:58:49 -0400</pubDate><guid>https://datumorphism.leima.is/wiki/sugar/regular-experssions/</guid><description>List of Keys Anchors at the beginning of line ^ import re p = re.compile(&amp;#39;^T&amp;#39;, re.I) line = &amp;#34;The email address is this this the do you see&amp;#34; result = p.findall(line) print(result) # [&amp;#39;T&amp;#39;] at the end of the line $ import re p = re.compile(&amp;#39;e$&amp;#39;, re.I) line = &amp;#34;The email address is this this the do you see&amp;#34; result = p.findall(line) print(result) # [&amp;#39;e&amp;#39;] Character Classes Printable Characters any character . import re p = re.compile(&amp;#39;^T.&amp;#39;, re.I) line = &amp;#34;The email address is this this the do you see&amp;#34; result = p.findall(line) print(result) # [&amp;#39;Th&amp;#39;] single character of digit \d word character \w (including alphanumeric character and underscore): import re line = &amp;#34;The email address is this this the do you see&amp;#34; result = re.</description></item><item><title>Bias-Variance</title><link>https://datumorphism.leima.is/wiki/machine-learning/basics/bias-variance/</link><pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/wiki/machine-learning/basics/bias-variance/</guid><description>Bias and Variance Suppose $f(X)$ is a perfect model that represents a &amp;ldquo;tight&amp;rdquo; model of the dataset $(X,Y)$ but some irredicible error $\epsilon$,
$$ \begin{equation} Y = f(X) + \epsilon. \label{dataset-using-true-model} \end{equation} $$
On the other hand, we build another model using a specific method such as k-nearest neighbors, which is denoted as $k(X)$.
Why the two models?
Why are we talking about the perfect model and a model using a specific method?
The perfect model $f(X)$ is our ultimate goal, while the model using a specific method $k(X)$ is our effort of approaching the ultimate model.
The bias measures the deficit between $k(X)$ and the perfect model $f(X)$,</description></item><item><title>Binning Data Values using Pandas</title><link>https://datumorphism.leima.is/til/programming/pandas/pandas-binning-values/</link><pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/pandas/pandas-binning-values/</guid><description>Use the pd.cut function. The bins argument is using (] are the segments. The official documentation comes with detailed examples.
If pandas is not an option, one could use numpy.digitize to find which bin the elements belong to.</description></item><item><title>Python Class Sequential Inheritance</title><link>https://datumorphism.leima.is/til/programming/python/python-class-inheritance-sequential/</link><pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-class-inheritance-sequential/</guid><description># An experiment on python super class Base: def __init__(self): print(&amp;#34;Start A&amp;#34;) print(&amp;#34;End A&amp;#34;) class IA(Base): def __init__(self): print(&amp;#34;Start IA&amp;#34;) super(IA, self).__init__() print(&amp;#34;End IA&amp;#34;) class IB(IA): def __init__(self): print(&amp;#34;Start IB&amp;#34;) super(IB, self).__init__() print(&amp;#34;End IB&amp;#34;) print(&amp;#34;Experiment 1:&amp;#34;) ib = IB()</description></item><item><title>Three dots in Python</title><link>https://datumorphism.leima.is/til/programming/python/python-three-dots/</link><pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-three-dots/</guid><description>Using three dots in Python:
from abc import abstractmethod class A: def __init__(self): self.name = &amp;#34;A&amp;#34; print(&amp;#34;Init&amp;#34;) def three_dots(self): ... @abstractmethod def abs_three_dots(self): ... def raise_it(self): raise Exception(&amp;#34;Not yet done&amp;#34;) a = A() print(&amp;#34;\nthree_dots&amp;#34;) print(a.three_dots()) print(&amp;#34;\nabs_three_dots&amp;#34;) print(a.abs_three_dots()) print(&amp;#34;\nraise_it&amp;#34;) a.raise_it() Returns
three_dots None abs_three_dots None raise_it Traceback (most recent call last): File &amp;#34;main.py&amp;#34;, line 27, in &amp;lt;module&amp;gt; a.raise_it() File &amp;#34;main.py&amp;#34;, line 14, in raise_it raise Exception(&amp;#34;Not yet done&amp;#34;) Exception: Not yet done</description></item><item><title>Ordered Member Functions of a Class in Python</title><link>https://datumorphism.leima.is/til/programming/python/python-class-methods-ordered/</link><pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-class-methods-ordered/</guid><description># References: # 1. https://stackoverflow.com/questions/48145317/can-i-add-attributes-to-class-methods-in-python from functools import wraps # Define a decorator def attributes(**attrs): &amp;#34;&amp;#34;&amp;#34; Set attributes of member functions in a class. ``` class AGoodClass: def __init__(self): self.size = 0 @attributes(order=1) def first_good_member(self, new): return &amp;#34;first good member&amp;#34; @attributes(order=2) def second_good_member(self, new): return &amp;#34;second good member&amp;#34; ``` References: 1. https://stackoverflow.com/a/48146924/1477359 &amp;#34;&amp;#34;&amp;#34; def decorator(f): @wraps(f) def wrapper(*args, **kwargs): return f(*args, **kwargs) for attr_name, attr_value in attrs.items(): setattr(wrapper, attr_name, attr_value) return wrapper return decorator class AGoodClass: def __init__(self): self.size = 0 @attributes(order=1) def first_good_member(self, new): return &amp;#34;first good member&amp;#34; @attributes(order=2) def second_good_member(self, new): return &amp;#34;second good member&amp;#34; # Test agc = AGoodClass() print(agc.</description></item><item><title>== and is in Python</title><link>https://datumorphism.leima.is/til/programming/python/python-none/</link><pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-none/</guid><description>== and is are different</description></item><item><title>Switch statement in Python</title><link>https://datumorphism.leima.is/til/programming/python/python-switch-statement/</link><pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-switch-statement/</guid><description>Love switch statement? We can design a switch statement it in python.</description></item><item><title>Python Tilde Operator</title><link>https://datumorphism.leima.is/til/programming/python/python-tilde-operator/</link><pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-tilde-operator/</guid><description>tilde operator may not work as you expected</description></item><item><title>eval in Python is Dangerous</title><link>https://datumorphism.leima.is/til/programming/python/python-eval/</link><pubDate>Tue, 13 Aug 2019 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-eval/</guid><description>eval is powerful but really dangerous</description></item><item><title>Add Data Files to Python Package</title><link>https://datumorphism.leima.is/til/programming/python/python-package-including-data-file/</link><pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-package-including-data-file/</guid><description>Add Data Files to Python Package using manifest.in and setup.py</description></item><item><title>Installing requirements.txt in Conda Environments</title><link>https://datumorphism.leima.is/til/programming/python/python-anaconda-install-requirements/</link><pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-anaconda-install-requirements/</guid><description>Why is pip install -r requirements.txt not working in conda?</description></item><item><title>Flatten 2D List in Python</title><link>https://datumorphism.leima.is/til/programming/python/python-flatten-2d-list/</link><pubDate>Wed, 23 Jan 2019 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-flatten-2d-list/</guid><description>Flatten 2D list using sum</description></item><item><title>Python Datetime on Different OS</title><link>https://datumorphism.leima.is/til/programming/python/python-datetime-on-different-os/</link><pubDate>Mon, 31 Dec 2018 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-datetime-on-different-os/</guid><description>Python datetime on different os behaves inconsistently</description></item><item><title>Python If on Numbers</title><link>https://datumorphism.leima.is/til/programming/python/python-if-condition-on-numbers/</link><pubDate>Mon, 31 Dec 2018 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-if-condition-on-numbers/</guid><description>If on int is dangerous</description></item><item><title>Python Long String</title><link>https://datumorphism.leima.is/til/programming/python/python-long-string/</link><pubDate>Mon, 31 Dec 2018 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-long-string/</guid><description>Python long string formatting</description></item><item><title>Python Reliable Path to File</title><link>https://datumorphism.leima.is/til/programming/python/python-reliable-path/</link><pubDate>Mon, 31 Dec 2018 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-reliable-path/</guid><description>Find the actual path to file</description></item><item><title>Pandas with MultiProcessing</title><link>https://datumorphism.leima.is/til/programming/pandas/pandas-parallel-multiprocessing/</link><pubDate>Sun, 09 Sep 2018 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/pandas/pandas-parallel-multiprocessing/</guid><description>Define number of processes, prs; Split dataframe into prs dataframes; Process each dataframe with one process; Merge processed dataframes into one. A piece of demo code is shown below.
from multiprocessing import Pool from multiprocessing.dummy import Pool as ThreadPool import pandas as pd # Create a dataframe to be processed df = pd.read_csv(&amp;#39;somedata.csv&amp;#39;).reset_index(drop=True) # Define a function to be applied to the dataframe def nice_func(name, age): return (name,age) # Apply to dataframe def apply_to_df(df_chunks): df_chunks[&amp;#39;tupled&amp;#39;] = df_chunks.apply( lambda x: nice_func( x[&amp;#39;host_name&amp;#39;], x[&amp;#39;host_country&amp;#39;]), axis=1 ) return df_chunks print(&amp;#39;finished chunk&amp;#39;) # Divide dataframe to chunks prs = 100 # define the number of processes chunk_size = int(df.</description></item><item><title>Copy Scalars and Lists in Python</title><link>https://datumorphism.leima.is/til/programming/python/python-copy-value-or-address/</link><pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-copy-value-or-address/</guid><description>Python copy values of scalars but addresses of lists</description></item><item><title>Calculated Columns in Pandas</title><link>https://datumorphism.leima.is/til/programming/pandas/pandas-new-column-from-other/</link><pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/pandas/pandas-new-column-from-other/</guid><description>Create new columns in pandas</description></item><item><title>tree in Linux</title><link>https://datumorphism.leima.is/til/programming/trees/</link><pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/trees/</guid><description>Trees in computer science</description></item><item><title>Python Default Parameters Tripped Me Up</title><link>https://datumorphism.leima.is/til/programming/python/python-default-parameters-mutable/</link><pubDate>Sat, 03 Jun 2017 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-default-parameters-mutable/</guid><description>Python default parameters might be changed with each run</description></item><item><title>How to Run Mathematica Script in Terminal</title><link>https://datumorphism.leima.is/til/programming/run-mathematica-script-in-terminal/</link><pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/run-mathematica-script-in-terminal/</guid><description>Using math -run or wolfram -run we could execute a Mathematica script through ssh in terminal.</description></item><item><title>Start a Simple Server</title><link>https://datumorphism.leima.is/til/programming/start-simple-server/</link><pubDate>Sat, 17 Sep 2016 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/start-simple-server/</guid><description>With one line of python command</description></item><item><title>matplotlib x y limit and aspect ratio</title><link>https://datumorphism.leima.is/til/programming/matplotlib-x-y-limit-and-aspect-ratio/</link><pubDate>Thu, 21 Jul 2016 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/matplotlib-x-y-limit-and-aspect-ratio/</guid><description>matplotlib x y limit and aspect ratio</description></item><item><title>TOP Command</title><link>https://datumorphism.leima.is/til/programming/top/</link><pubDate>Thu, 21 Jul 2016 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/top/</guid><description>Some tips about top command</description></item><item><title>Assigning Values to Multiple Variables</title><link>https://datumorphism.leima.is/til/programming/python/python-assigning-values-to-multiple-variables/</link><pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-assigning-values-to-multiple-variables/</guid><description>Assigning Values to Multiple Variables</description></item><item><title>Migrating Wordpress to Static</title><link>https://datumorphism.leima.is/til/programming/migrating-wordpress-to-static-site/</link><pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/migrating-wordpress-to-static-site/</guid><description>Migrating Wordpress to Static</description></item><item><title>Open URL using python using webbrowser module</title><link>https://datumorphism.leima.is/til/programming/open-url-using-python-webbrowser-module/</link><pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/open-url-using-python-webbrowser-module/</guid><description>Open URL using python using webbrowser module</description></item><item><title>Python Code Style</title><link>https://datumorphism.leima.is/til/programming/python/python-code-style/</link><pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-code-style/</guid><description>Code Style of Python Guide.
PEP 20 &amp;ndash; The Zen of Python
1. Beautiful is better than ugly. 2. Explicit is better than implicit. 3. Simple is better than complex. 4. Complex is better than complicated. 5. Flat is better than nested. 6. Sparse is better than dense. 7. Readability counts. 8. Special cases aren&amp;#39;t special enough to break the rules. 9. Although practicality beats purity. 10. Errors should never pass silently. 11. Unless explicitly silenced. 12. In the face of ambiguity, refuse the temptation to guess. 13. There should be one-- and preferably only one --obvious way to do it.</description></item><item><title>Python Creating Lists</title><link>https://datumorphism.leima.is/til/programming/python/python-creating-lists/</link><pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-creating-lists/</guid><description>Code Style of Python Guide</description></item><item><title>Python enumertate</title><link>https://datumorphism.leima.is/til/programming/python/python-enumerate/</link><pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-enumerate/</guid><description>Python enumertate function</description></item><item><title>Python List Comprehensions</title><link>https://datumorphism.leima.is/til/programming/python/python-list-comprehensions/</link><pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-list-comprehensions/</guid><description>Python List Comprehensions</description></item><item><title>Python Making a List</title><link>https://datumorphism.leima.is/til/programming/python/python-making-a-list/</link><pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-making-a-list/</guid><description>Python Making a List</description></item><item><title>Python Map vs For in Python</title><link>https://datumorphism.leima.is/til/programming/python/python-map-vs-for/</link><pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-map-vs-for/</guid><description>Python Map vs For in Python</description></item><item><title>Python Stupid numpy.piecewise</title><link>https://datumorphism.leima.is/til/programming/python/python-stupid-numpy-piecewise/</link><pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-stupid-numpy-piecewise/</guid><description>Python Stupid numpy.piecewise</description></item><item><title>Python Various Ways of Writing Loops</title><link>https://datumorphism.leima.is/til/programming/python/python-writing-loops/</link><pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-writing-loops/</guid><description>Python Various Ways of Writing Loops</description></item><item><title>Run a program in the background on ubuntu</title><link>https://datumorphism.leima.is/til/programming/run-program-in-background-ubuntu/</link><pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/run-program-in-background-ubuntu/</guid><description>Run a program in the background on ubuntu</description></item><item><title>snakeviz</title><link>https://datumorphism.leima.is/til/programming/python/python-profile-snakeviz/</link><pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate><guid>https://datumorphism.leima.is/til/programming/python/python-profile-snakeviz/</guid><description>Python snakeviz</description></item></channel></rss>